import telebot
import sqlite3
import matplotlib.pyplot as plt
import numpy as np

TOKEN = "7887756811:AAFyo_adpSdMuDPr8FYRIeRrniSlJEUg484"
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect("students.db", check_same_thread=False)
cursor = conn.cursor()

def calculate_percentages(user_id):
    cursor.execute("SELECT sat, act, ielts, toefl, gpa, olympiads, volunteering, research, work FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if not data:
        return None

    sat, act, ielts, toefl, gpa, olympiads, volunteering, research, work = data

    sat_percent = (sat / 1600 * 100) if sat else (act / 36 * 100) if act else 0
    ielts_percent = (ielts / 9 * 100) if ielts else (toefl / 120 * 100) if toefl else 0
    gpa_percent = (gpa / 4 * 100) if gpa else 0
    academic_score = np.mean([sat_percent, ielts_percent, gpa_percent])

    olympiad_score = 100 if olympiads and "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π" in olympiads else 80 if olympiads and "—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–π" in olympiads else 60 if olympiads else 0
    volunteering_score = 100 if volunteering and "100 —á–∞—Å–æ–≤" in volunteering else 75 if volunteering and "50 —á–∞—Å–æ–≤" in volunteering else 40 if volunteering else 0
    research_score = 100 if research else 0
    work_score = 100 if work else 0
    extracurricular_score = np.mean([olympiad_score, volunteering_score, research_score, work_score])

    base_admission_chance = 100 if academic_score >= 80 else 70 if academic_score >= 60 else 50
    if extracurricular_score > 70:
        base_admission_chance += 10

    return round(academic_score), round(extracurricular_score), round(base_admission_chance)

def generate_chart(user_id):
    academic, extracurricular, admission = calculate_percentages(user_id)
    
    labels = ["–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–í–Ω–µ–∫–ª–∞—Å—Å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "–®–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]
    values = [academic, extracurricular, admission]

    plt.figure(figsize=(6, 6))
    plt.bar(labels, values, color=["blue", "green", "red"])
    plt.ylim(0, 100)
    plt.ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç")
    plt.title("–ê–Ω–∞–ª–∏–∑ —à–∞–Ω—Å–æ–≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    
    img_path = f"chart_{user_id}.png"
    plt.savefig(img_path)
    plt.close()
    return img_path

@bot.message_handler(commands=['analyze'])
def analyze(message):
    user_id = message.chat.id
    result = calculate_percentages(user_id)
    
    if not result:
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å!")
        return
    
    academic, extracurricular, admission = result
    img_path = generate_chart(user_id)

    text = f"üìä –¢–≤–æ–π –∞–Ω–∞–ª–∏–∑:\n\n" \
           f"üîµ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {academic}%\n" \
           f"üü¢ –í–Ω–µ–∫–ª–∞—Å—Å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {extracurricular}%\n" \
           f"üî¥ –®–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {admission}%\n\n"

    recommendations = []
    if academic < 60:
        recommendations.append("üìå –£–ª—É—á—à–∏—Ç—å SAT/ACT, IELTS/TOEFL –∏–ª–∏ GPA –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤.")
    if extracurricular < 50:
        recommendations.append("üìå –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–µ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
    if admission < 60:
        recommendations.append("üìå –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã —Å –Ω–∏–∑–∫–∏–º–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –≤—ã—Å–æ–∫–∏–º —à–∞–Ω—Å–æ–º –Ω–∞ –≥—Ä–∞–Ω—Ç.")

    text += "\n".join(recommendations) if recommendations else "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —Å–∏–ª—å–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã."

    bot.send_message(user_id, text, parse_mode="Markdown")
    with open(img_path, "rb") as img:
        bot.send_photo(user_id, img)

bot.polling()